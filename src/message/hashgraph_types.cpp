/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hashgraph_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace hashgraph { namespace message {


Data::~Data() noexcept {
}


void Data::__set_seqNum(const int64_t val) {
  this->seqNum = val;
}

void Data::__set_payload(const int32_t val) {
  this->payload = val;
}

void Data::__set_selfHash(const std::string& val) {
  this->selfHash = val;
}

void Data::__set_gossipHash(const std::string& val) {
  this->gossipHash = val;
}

void Data::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void Data::__set_target(const int32_t val) {
  this->target = val;
}

void Data::__set_owner(const int32_t val) {
  this->owner = val;
}
std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->seqNum);
          this->__isset.seqNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->payload);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->selfHash);
          this->__isset.selfHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gossipHash);
          this->__isset.gossipHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target);
          this->__isset.target = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Data");

  xfer += oprot->writeFieldBegin("seqNum", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->seqNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->payload);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selfHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->selfHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gossipHash", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->gossipHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->target);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.seqNum, b.seqNum);
  swap(a.payload, b.payload);
  swap(a.selfHash, b.selfHash);
  swap(a.gossipHash, b.gossipHash);
  swap(a.timestamp, b.timestamp);
  swap(a.target, b.target);
  swap(a.owner, b.owner);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other0) {
  seqNum = other0.seqNum;
  payload = other0.payload;
  selfHash = other0.selfHash;
  gossipHash = other0.gossipHash;
  timestamp = other0.timestamp;
  target = other0.target;
  owner = other0.owner;
  __isset = other0.__isset;
}
Data& Data::operator=(const Data& other1) {
  seqNum = other1.seqNum;
  payload = other1.payload;
  selfHash = other1.selfHash;
  gossipHash = other1.gossipHash;
  timestamp = other1.timestamp;
  target = other1.target;
  owner = other1.owner;
  __isset = other1.__isset;
  return *this;
}
void Data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Data(";
  out << "seqNum=" << to_string(seqNum);
  out << ", " << "payload=" << to_string(payload);
  out << ", " << "selfHash=" << to_string(selfHash);
  out << ", " << "gossipHash=" << to_string(gossipHash);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "target=" << to_string(target);
  out << ", " << "owner=" << to_string(owner);
  out << ")";
}

}} // namespace
