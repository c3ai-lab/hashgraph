/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hashgraph_TYPES_H
#define hashgraph_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace hashgraph { namespace message {

class Data;

typedef struct _Data__isset {
  _Data__isset() : seqNum(false), payload(false), selfHash(false), gossipHash(false), timestamp(false), target(false), owner(false) {}
  bool seqNum :1;
  bool payload :1;
  bool selfHash :1;
  bool gossipHash :1;
  bool timestamp :1;
  bool target :1;
  bool owner :1;
} _Data__isset;

class Data : public virtual ::apache::thrift::TBase {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : seqNum(0), payload(0), selfHash(), gossipHash(), timestamp(0), target(0), owner(0) {
  }

  virtual ~Data() noexcept;
  int64_t seqNum;
  int32_t payload;
  std::string selfHash;
  std::string gossipHash;
  int64_t timestamp;
  int32_t target;
  int32_t owner;

  _Data__isset __isset;

  void __set_seqNum(const int64_t val);

  void __set_payload(const int32_t val);

  void __set_selfHash(const std::string& val);

  void __set_gossipHash(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_target(const int32_t val);

  void __set_owner(const int32_t val);

  bool operator == (const Data & rhs) const
  {
    if (!(seqNum == rhs.seqNum))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(selfHash == rhs.selfHash))
      return false;
    if (!(gossipHash == rhs.gossipHash))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(owner == rhs.owner))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

std::ostream& operator<<(std::ostream& out, const Data& obj);

}} // namespace

#endif
