/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Gossip_H
#define Gossip_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "hashgraph_types.h"

namespace hashgraph { namespace message {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GossipIf {
 public:
  virtual ~GossipIf() {}
  virtual void recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip) = 0;
};

class GossipIfFactory {
 public:
  typedef GossipIf Handler;

  virtual ~GossipIfFactory() {}

  virtual GossipIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GossipIf* /* handler */) = 0;
};

class GossipIfSingletonFactory : virtual public GossipIfFactory {
 public:
  GossipIfSingletonFactory(const ::std::shared_ptr<GossipIf>& iface) : iface_(iface) {}
  virtual ~GossipIfSingletonFactory() {}

  virtual GossipIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GossipIf* /* handler */) {}

 protected:
  ::std::shared_ptr<GossipIf> iface_;
};

class GossipNull : virtual public GossipIf {
 public:
  virtual ~GossipNull() {}
  void recieveGossip(const int32_t /* gossiper */, const std::vector<Data> & /* gossip */) {
    return;
  }
};

typedef struct _Gossip_recieveGossip_args__isset {
  _Gossip_recieveGossip_args__isset() : gossiper(false), gossip(false) {}
  bool gossiper :1;
  bool gossip :1;
} _Gossip_recieveGossip_args__isset;

class Gossip_recieveGossip_args {
 public:

  Gossip_recieveGossip_args(const Gossip_recieveGossip_args&);
  Gossip_recieveGossip_args& operator=(const Gossip_recieveGossip_args&);
  Gossip_recieveGossip_args() : gossiper(0) {
  }

  virtual ~Gossip_recieveGossip_args() noexcept;
  int32_t gossiper;
  std::vector<Data>  gossip;

  _Gossip_recieveGossip_args__isset __isset;

  void __set_gossiper(const int32_t val);

  void __set_gossip(const std::vector<Data> & val);

  bool operator == (const Gossip_recieveGossip_args & rhs) const
  {
    if (!(gossiper == rhs.gossiper))
      return false;
    if (!(gossip == rhs.gossip))
      return false;
    return true;
  }
  bool operator != (const Gossip_recieveGossip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Gossip_recieveGossip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Gossip_recieveGossip_pargs {
 public:


  virtual ~Gossip_recieveGossip_pargs() noexcept;
  const int32_t* gossiper;
  const std::vector<Data> * gossip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Gossip_recieveGossip_result {
 public:

  Gossip_recieveGossip_result(const Gossip_recieveGossip_result&);
  Gossip_recieveGossip_result& operator=(const Gossip_recieveGossip_result&);
  Gossip_recieveGossip_result() {
  }

  virtual ~Gossip_recieveGossip_result() noexcept;

  bool operator == (const Gossip_recieveGossip_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Gossip_recieveGossip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Gossip_recieveGossip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Gossip_recieveGossip_presult {
 public:


  virtual ~Gossip_recieveGossip_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GossipClient : virtual public GossipIf {
 public:
  GossipClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GossipClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip);
  void send_recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip);
  void recv_recieveGossip();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GossipProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<GossipIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GossipProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_recieveGossip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GossipProcessor(::std::shared_ptr<GossipIf> iface) :
    iface_(iface) {
    processMap_["recieveGossip"] = &GossipProcessor::process_recieveGossip;
  }

  virtual ~GossipProcessor() {}
};

class GossipProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GossipProcessorFactory(const ::std::shared_ptr< GossipIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< GossipIfFactory > handlerFactory_;
};

class GossipMultiface : virtual public GossipIf {
 public:
  GossipMultiface(std::vector<std::shared_ptr<GossipIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GossipMultiface() {}
 protected:
  std::vector<std::shared_ptr<GossipIf> > ifaces_;
  GossipMultiface() {}
  void add(::std::shared_ptr<GossipIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recieveGossip(gossiper, gossip);
    }
    ifaces_[i]->recieveGossip(gossiper, gossip);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GossipConcurrentClient : virtual public GossipIf {
 public:
  GossipConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  GossipConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip);
  int32_t send_recieveGossip(const int32_t gossiper, const std::vector<Data> & gossip);
  void recv_recieveGossip(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
